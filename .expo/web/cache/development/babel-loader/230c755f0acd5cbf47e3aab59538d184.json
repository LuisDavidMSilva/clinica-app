{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { api } from \"../libs/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({});\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      token = _useState4[0],\n      setToken = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  useEffect(function () {\n    var onLoadingData = function _callee() {\n      var itemUser, itemToken;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@RNAuth:user'));\n\n            case 2:\n              itemUser = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@RNAuth:token'));\n\n            case 5:\n              itemToken = _context.sent;\n\n              if (itemUser && itemToken) {\n                api.defaults.headers.common['Authorization'] = \"Bearer \" + itemToken;\n                setUser(JSON.parse(itemUser));\n                setToken(JSON.parse(itemToken));\n                setLoading(false);\n              } else {\n                setUser(null);\n                setToken(null);\n                setLoading(true);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    onLoadingData();\n  }, [token]);\n\n  var signIn = function _callee2(_ref2) {\n    var email, password, _await$api$post, result;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            email = _ref2.email, password = _ref2.password;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(api.post('authentication', {\n              email: email,\n              password: password\n            }));\n\n          case 3:\n            _await$api$post = _context2.sent;\n            result = _await$api$post.data.result;\n            setUser(result.user);\n            setToken(result.token);\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.multiSet([['@RNAuth:user', JSON.stringify(result.user)], ['@RNAuth:token', JSON.stringify(result.token)]]));\n\n          case 9:\n            api.defaults.headers.common['Authorization'] = \"Bearer \" + result.token;\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var signOut = function _callee3() {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n          case 2:\n            setUser(null);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var value = {\n    isAuthenticated: !!user,\n    user: user,\n    token: token,\n    loading: loading,\n    signIn: signIn,\n    signOut: signOut\n  };\n  return _jsx(AuthContext.Provider, {\n    value: value,\n    children: children\n  });\n};","map":{"version":3,"sources":["/home/willsouza/Projetos/clinica-app/src/contexts/auth-context.tsx"],"names":["React","createContext","useEffect","useState","AsyncStorage","api","AuthContext","AuthProvider","children","user","setUser","token","setToken","loading","setLoading","onLoadingData","getItem","itemUser","itemToken","defaults","headers","common","JSON","parse","signIn","email","password","post","result","data","multiSet","stringify","signOut","clear","value","isAuthenticated"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { api } from '../libs/api';\nimport { useQuery } from 'react-query';\n\nexport type UserProps = {\n  id: string;\n  email: string;\n  name: string;\n};\n\nexport type SignInProps = {\n  email: string;\n  password: string;\n};\n\nexport type AuthContextProps = {\n  isAuthenticated: boolean;\n  user: UserProps | null;\n  token: string | null;\n  loading: boolean;\n  signIn(data: SignInProps): Promise<void>;\n  signOut(): Promise<void>;\n};\n\nexport type AuthProviderProps = {\n  children: ReactNode;\n};\n\nexport const AuthContext = createContext<AuthContextProps>(\n  {} as AuthContextProps\n);\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<UserProps | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const onLoadingData = async () => {\n      const itemUser = await AsyncStorage.getItem('@RNAuth:user');\n      const itemToken = await AsyncStorage.getItem('@RNAuth:token');\n\n      if (itemUser && itemToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${itemToken}`;\n\n        setUser(JSON.parse(itemUser));\n        setToken(JSON.parse(itemToken));\n        setLoading(false);\n      } else {\n        setUser(null);\n        setToken(null);\n        setLoading(true);\n      }\n    };\n\n    onLoadingData();\n  }, [token]);\n\n  const signIn = async ({ email, password }: SignInProps): Promise<void> => {\n    const {\n      data: { result },\n    } = await api.post('authentication', { email, password });\n\n    setUser(result.user);\n    setToken(result.token);\n\n    await AsyncStorage.multiSet([\n      ['@RNAuth:user', JSON.stringify(result.user)],\n      ['@RNAuth:token', JSON.stringify(result.token)],\n    ]);\n\n    api.defaults.headers.common['Authorization'] = `Bearer ${result.token}`;\n  };\n\n  const signOut = async (): Promise<void> => {\n    await AsyncStorage.clear();\n\n    setUser(null);\n  };\n\n  const value = {\n    isAuthenticated: !!user,\n    user,\n    token,\n    loading,\n    signIn,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}