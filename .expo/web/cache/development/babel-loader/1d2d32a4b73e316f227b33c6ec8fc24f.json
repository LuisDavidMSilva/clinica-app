{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"./Text\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useStyles } from \"./hooks/use-styles\";\n\nvar Badge = function Badge(_ref) {\n  var label = _ref.label,\n      _ref$showZero = _ref.showZero,\n      showZero = _ref$showZero === void 0 ? false : _ref$showZero,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 99 : _ref$max,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'secondary' : _ref$color,\n      tintColor = _ref.tintColor,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      children = _ref.children;\n  var palette = usePaletteColor(color, tintColor);\n  var styles = useStyles(function () {\n    return {\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10\n      }\n    };\n  }, [palette]);\n  var isVisible = useMemo(function () {\n    return label === 0 ? visible && showZero : visible;\n  }, [label, showZero, visible]);\n  var animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n  useEffect(function () {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [isVisible]);\n\n  var getLabel = function getLabel() {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"body2\",\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, typeof label === 'number' && label > max ? max + \"+\" : label);\n\n      case 'function':\n        return label({\n          color: palette.on\n        });\n\n      default:\n        return label;\n    }\n  };\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, getLabel(), children);\n};\n\nexport default Badge;","map":{"version":3,"sources":["Badge.tsx"],"names":["Badge","showZero","max","visible","color","children","palette","usePaletteColor","styles","useStyles","container","minWidth","height","justifyContent","alignItems","paddingHorizontal","backgroundColor","borderRadius","isVisible","useMemo","label","animated","useRef","Animated","useEffect","toValue","duration","useNativeDriver","getLabel","on","transform","scale"],"mappings":"AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,OAAA,EAAA,MAAA,QAAA,OAAA;;AAEA,OAAA,IAAA;AACA,SAAA,eAAA;AACA,SAAA,SAAA;;AAoBA,IAAMA,KAA2B,GAAG,SAA9BA,KAA8B,CAAA,IAAA,EAU9B;AAV+B,MAAA,KAAA,GAU/B,IAV+B,CAAA,KAAA;AAAA,sBAU/B,IAV+B,CAEnCC,QAFmC;AAAA,MAEnCA,QAFmC,8BAAA,KAAA;AAAA,iBAU/B,IAV+B,CAGnCC,GAHmC;AAAA,MAGnCA,GAHmC,yBAAA,EAAA;AAAA,qBAU/B,IAV+B,CAInCC,OAJmC;AAAA,MAInCA,OAJmC,6BAAA,IAAA;AAAA,mBAU/B,IAV+B,CAKnCC,KALmC;AAAA,MAKnCA,KALmC,2BAAA,WAAA;AAAA,MAAA,SAAA,GAU/B,IAV+B,CAAA,SAAA;AAAA,MAAA,KAAA,GAU/B,IAV+B,CAAA,KAAA;AAAA,MAAA,UAAA,GAU/B,IAV+B,CAAA,UAAA;AAAA,MASnCC,QATmC,GAU/B,IAV+B,CASnCA,QATmC;AAWnC,MAAMC,OAAO,GAAGC,eAAe,CAAA,KAAA,EAA/B,SAA+B,CAA/B;AAEA,MAAMC,MAAM,GAAGC,SAAS,CACtB;AAAA,WAAO;AACLC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EADC,EAAA;AAETC,QAAAA,MAAM,EAFG,EAAA;AAGTC,QAAAA,cAAc,EAHL,QAAA;AAITC,QAAAA,UAAU,EAJD,QAAA;AAKTC,QAAAA,iBAAiB,EALR,CAAA;AAMTC,QAAAA,eAAe,EAAEV,OAAO,CANf,IAAA;AAOTW,QAAAA,YAAY,EAAE;AAPL;AADN,KAAP;AAAA,GADsB,EAYtB,CAZF,OAYE,CAZsB,CAAxB;AAeA,MAAMC,SAAS,GAAGC,OAAO,CAAC;AAAA,WAAOC,KAAK,KAALA,CAAAA,GAAcjB,OAAO,IAArBiB,QAAAA,GAAR,OAAC;AAAA,GAAD,EAAsD,CAAA,KAAA,EAAA,QAAA,EAA/E,OAA+E,CAAtD,CAAzB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,IAAIC,QAAQ,CAAZ,KAAA,CAAmBL,SAAS,GAAA,CAAA,GAAnCI,CAAO,CAAD,CAANA,CAAjB,OAAA;AAEAE,EAAAA,SAAS,CAAC,YAAM;AACdD,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,QAAAA,EAA0B;AACxBE,MAAAA,OAAO,EAAEP,SAAS,GAAA,CAAA,GADM,CAAA;AAExBQ,MAAAA,QAAQ,EAFgB,GAAA;AAGxBC,MAAAA,eAAe,EAAE;AAHO,KAA1BJ,EAAAA,KAAAA;AADO,GAAA,EAMN,CANHC,SAMG,CANM,CAATA;;AAQA,MAAMI,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,YAAQ,OAAR,KAAA;AACE,WAAA,QAAA;AACA,WAAA,QAAA;AACE,eACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,OAAO,EAAb,OAAA;AAAsB,UAAA,KAAK,EAAE,CAAC;AAAExB,YAAAA,KAAK,EAAEE,OAAO,CAACuB;AAAjB,WAAD,EAAA,UAAA;AAA7B,SAAA,EACG,OAAA,KAAA,KAAA,QAAA,IAA6BT,KAAK,GAAlC,GAAA,GAAA,GAAA,SAFL,KACE,CADF;;AAKF,WAAA,UAAA;AACE,eAAOA,KAAK,CAAC;AAAEhB,UAAAA,KAAK,EAAEE,OAAO,CAACuB;AAAjB,SAAD,CAAZ;;AACF;AACE,eAAA,KAAA;AAXJ;AADF,GAAA;;AAgBA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,IAAA,KAAK,EAAE,CAACrB,MAAM,CAAP,SAAA,EAAmB;AAAEsB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAEV;AAAT,OAAD;AAAb,KAAnB,EAAA,KAAA;AAAtB,GAAA,EACGO,QADH,EAAA,EADF,QACE,CADF;AAxDF,CAAA;;AAgEA,eAAA,KAAA","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated, StyleProp, TextStyle, ViewProps } from 'react-native';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BadgeProps {\n  label?: number | string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  showZero?: boolean;\n\n  max?: number;\n\n  visible?: boolean;\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  style?: Animated.AnimatedProps<ViewProps>['style'];\n\n  labelStyle?: StyleProp<TextStyle>;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  label,\n  showZero = false,\n  max = 99,\n  visible = true,\n  color = 'secondary',\n  tintColor,\n  style,\n  labelStyle,\n  children,\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10,\n      },\n    }),\n    [palette]\n  );\n\n  const isVisible = useMemo(() => (label === 0 ? visible && showZero : visible), [label, showZero, visible]);\n\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return (\n          <Text variant=\"body2\" style={[{ color: palette.on }, labelStyle]}>\n            {typeof label === 'number' && label > max ? `${max}+` : label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  return (\n    <Animated.View style={[styles.container, { transform: [{ scale: animated }] }, style]}>\n      {getLabel()}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default Badge;\n"]},"metadata":{},"sourceType":"module"}