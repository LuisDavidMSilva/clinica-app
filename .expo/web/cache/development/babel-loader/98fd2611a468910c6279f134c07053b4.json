{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"leading\", \"trailing\", \"variant\", \"color\", \"style\", \"contentContainerStyle\", \"labelStyle\", \"leadingContainerStyle\", \"trailingContainerStyle\", \"children\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport chroma from 'chroma-js';\nimport Pressable from \"./Pressable\";\nimport Text from \"./Text\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useTheme } from \"./base/ThemeContext\";\n\nvar Chip = function Chip(_ref) {\n  var label = _ref.label,\n      leading = _ref.leading,\n      trailing = _ref.trailing,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'filled' : _ref$variant,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'on-surface' : _ref$color,\n      style = _ref.style,\n      contentContainerStyle = _ref.contentContainerStyle,\n      labelStyle = _ref.labelStyle,\n      leadingContainerStyle = _ref.leadingContainerStyle,\n      trailingContainerStyle = _ref.trailingContainerStyle,\n      children = _ref.children,\n      pressEffect = _ref.pressEffect,\n      pressEffectColor = _ref.pressEffectColor,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      delayLongPress = _ref.delayLongPress,\n      disabled = _ref.disabled,\n      hitSlop = _ref.hitSlop,\n      pressRetentionOffset = _ref.pressRetentionOffset,\n      android_disableSound = _ref.android_disableSound,\n      android_ripple = _ref.android_ripple,\n      testOnly_pressed = _ref.testOnly_pressed,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme();\n  var palette = usePaletteColor(color, theme.palette.surface.main);\n  var scale = useMemo(function () {\n    return chroma.scale([palette.on, palette.main]);\n  }, [palette]);\n  var labelElement = typeof label === 'string' ? React.createElement(Text, {\n    variant: \"body2\",\n    style: [{\n      color: scale(0.87).hex()\n    }, labelStyle]\n  }, label) : typeof label === 'function' ? label({\n    color: scale(0.87).hex()\n  }) : label;\n  var leadingElement = typeof leading === 'function' ? leading({\n    color: scale(0.66).hex(),\n    size: 24\n  }) : leading;\n  var trailingElement = typeof trailing === 'function' ? trailing({\n    color: scale(0.66).hex(),\n    size: 18\n  }) : trailing;\n  return React.createElement(View, _extends({\n    style: [styles.container, variant === 'filled' && {\n      backgroundColor: scale(0.08).hex()\n    }, style]\n  }, rest), React.createElement(Pressable, {\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : scale(0.87).hex(),\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed,\n    style: [styles.contentContainer, contentContainerStyle]\n  }, leadingElement && React.createElement(View, {\n    style: [styles.leadingContainer, leadingContainerStyle]\n  }, leadingElement), labelElement, children, trailingElement && React.createElement(View, {\n    style: [styles.trailingContainer, trailingContainerStyle]\n  }, trailingElement), variant === 'outlined' && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.outline, {\n      borderColor: scale(0.26).hex()\n    }]\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    overflow: 'hidden'\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    height: 32\n  },\n  leadingContainer: {\n    marginStart: -8,\n    marginEnd: 8\n  },\n  trailingContainer: {\n    marginStart: 8,\n    marginEnd: -4\n  },\n  outline: {\n    borderWidth: 1,\n    borderRadius: 16\n  }\n});\nexport default Chip;","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","variant","color","rest","theme","useTheme","palette","usePaletteColor","scale","useMemo","chroma","labelElement","label","leadingElement","leading","size","trailingElement","trailing","styles","backgroundColor","pressEffectColor","StyleSheet","borderColor","container","borderRadius","overflow","contentContainer","flexDirection","alignItems","paddingHorizontal","height","leadingContainer","marginStart","marginEnd","trailingContainer","outline","borderWidth"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, StyleSheet, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\nimport chroma from 'chroma-js';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useTheme } from './base/ThemeContext';\n\nexport interface ChipProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text to display in the chip.\n   */\n  label: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `label`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `label`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The variant of the chip.\n   * - `filled`: A filled chip.\n   * - `outlined`: A solid background with a border.\n   *\n   * @default \"filled\"\n   */\n  variant?: 'filled' | 'outlined';\n\n  /**\n   * The color of the chip.\n   */\n  color?: Color;\n\n  /**\n   * The style of the chip's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the chip's label.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the chip's leading element.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the chip's trailing element.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Chip: React.FC<ChipProps> = ({\n  label,\n  leading,\n  trailing,\n  variant = 'filled',\n  color = 'on-surface',\n  style,\n  contentContainerStyle,\n  labelStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  children,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const theme = useTheme();\n\n  const palette = usePaletteColor(color, theme.palette.surface.main);\n\n  const scale = useMemo(() => chroma.scale([palette.on, palette.main]), [palette]);\n\n  const labelElement =\n    typeof label === 'string' ? (\n      <Text variant=\"body2\" style={[{ color: scale(0.87).hex() }, labelStyle]}>\n        {label}\n      </Text>\n    ) : typeof label === 'function' ? (\n      label({ color: scale(0.87).hex() })\n    ) : (\n      label\n    );\n\n  const leadingElement = typeof leading === 'function' ? leading({ color: scale(0.66).hex(), size: 24 }) : leading;\n\n  const trailingElement = typeof trailing === 'function' ? trailing({ color: scale(0.66).hex(), size: 18 }) : trailing;\n\n  return (\n    <View style={[styles.container, variant === 'filled' && { backgroundColor: scale(0.08).hex() }, style]} {...rest}>\n      <Pressable\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? scale(0.87).hex()}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n        style={[styles.contentContainer, contentContainerStyle]}\n      >\n        {leadingElement && <View style={[styles.leadingContainer, leadingContainerStyle]}>{leadingElement}</View>}\n        {labelElement}\n        {children}\n        {trailingElement && <View style={[styles.trailingContainer, trailingContainerStyle]}>{trailingElement}</View>}\n\n        {variant === 'outlined' && (\n          <View style={[StyleSheet.absoluteFill, styles.outline, { borderColor: scale(0.26).hex() }]} />\n        )}\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    height: 32,\n  },\n  leadingContainer: {\n    marginStart: -8,\n    marginEnd: 8,\n  },\n  trailingContainer: {\n    marginStart: 8,\n    marginEnd: -4,\n  },\n  outline: {\n    borderWidth: 1,\n    borderRadius: 16,\n  },\n});\n\nexport default Chip;\n"]},"metadata":{},"sourceType":"module"}