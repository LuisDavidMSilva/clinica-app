{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"variant\", \"size\", \"color\", \"tintColor\", \"loading\", \"loadingIndicator\", \"loadingIndicatorPosition\", \"visible\", \"style\", \"pressableContainerStyle\", \"contentContainerStyle\", \"iconContainerStyle\", \"labelContainerStyle\", \"labelStyle\", \"loadingOverlayContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Surface from \"./Surface\";\nimport Pressable from \"./Pressable\";\nimport Text from \"./Text\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useStyles } from \"./hooks/use-styles\";\nimport { useAnimatedElevation } from \"./hooks/use-animated-elevation\";\n\nvar FAB = function FAB(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'standard' : _ref$variant,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'default' : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'secondary' : _ref$color,\n      tintColor = _ref.tintColor,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      loadingIndicator = _ref.loadingIndicator,\n      _ref$loadingIndicator = _ref.loadingIndicatorPosition,\n      loadingIndicatorPosition = _ref$loadingIndicator === void 0 ? 'icon' : _ref$loadingIndicator,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      style = _ref.style,\n      pressableContainerStyle = _ref.pressableContainerStyle,\n      contentContainerStyle = _ref.contentContainerStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      labelContainerStyle = _ref.labelContainerStyle,\n      labelStyle = _ref.labelStyle,\n      loadingOverlayContainerStyle = _ref.loadingOverlayContainerStyle,\n      pressEffect = _ref.pressEffect,\n      pressEffectColor = _ref.pressEffectColor,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      delayLongPress = _ref.delayLongPress,\n      disabled = _ref.disabled,\n      hitSlop = _ref.hitSlop,\n      pressRetentionOffset = _ref.pressRetentionOffset,\n      android_disableSound = _ref.android_disableSound,\n      android_ripple = _ref.android_ripple,\n      testOnly_pressed = _ref.testOnly_pressed,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var palette = usePaletteColor(color, tintColor);\n  var hasIcon = useMemo(function () {\n    return icon || loading && loadingIndicatorPosition === 'icon';\n  }, [icon, loading, loadingIndicatorPosition]);\n  var styles = useStyles(function () {\n    return {\n      container: {\n        backgroundColor: palette.main,\n        borderRadius: size === 'default' ? 28 : 20\n      },\n      pressableContainer: {\n        borderRadius: size === 'default' ? 28 : 20,\n        overflow: 'hidden'\n      },\n      pressable: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingStart: variant === 'extended' ? hasIcon ? size === 'default' ? 12 : 6 : size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n        paddingEnd: variant === 'extended' ? size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n        paddingVertical: size === 'default' ? 16 : 8\n      },\n      iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 24,\n        height: 24\n      },\n      labelContainer: {\n        marginStart: hasIcon ? size === 'default' ? 12 : 6 : 0\n      },\n      loadingOverlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: palette.main\n      })\n    };\n  }, [variant, size, palette, hasIcon]);\n  var animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n  useEffect(function () {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  }, [visible]);\n\n  var getLoadingIndicator = function getLoadingIndicator() {\n    if (!loadingIndicator) return React.createElement(ActivityIndicator, {\n      color: palette.on\n    });\n\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: palette.on\n          }\n        }, loadingIndicator);\n\n      case 'function':\n        return loadingIndicator({\n          color: palette.on\n        });\n\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  var getIcon = function getIcon() {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({\n      color: palette.on,\n      size: 24\n    }) : icon;\n  };\n\n  var getLabel = function getLabel() {\n    switch (typeof label) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, label);\n\n      case 'function':\n        return label({\n          color: palette.on\n        });\n\n      default:\n        return label;\n    }\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var handlePressIn = useCallback(function (event) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  var handlePressOut = useCallback(function (event) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  var animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n  return React.createElement(Surface, _extends({\n    style: [animatedElevation, styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, rest), React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.on,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasIcon && React.createElement(View, {\n    style: [styles.iconContainer, iconContainerStyle]\n  }, getIcon()), variant === 'extended' && React.createElement(View, {\n    style: [styles.labelContainer, labelContainerStyle]\n  }, getLabel()), loading && loadingIndicatorPosition === 'overlay' && React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))));\n};\n\nexport default FAB;","map":{"version":3,"sources":["FAB.tsx"],"names":["FAB","variant","size","color","loading","loadingIndicatorPosition","visible","rest","palette","usePaletteColor","hasIcon","useMemo","icon","styles","useStyles","container","backgroundColor","borderRadius","pressableContainer","overflow","pressable","flexDirection","alignItems","paddingStart","paddingEnd","paddingVertical","iconContainer","justifyContent","width","height","labelContainer","marginStart","loadingOverlayContainer","StyleSheet","main","animated","useRef","Animated","useEffect","toValue","duration","useNativeDriver","getLoadingIndicator","on","loadingIndicator","getIcon","getLabel","label","useState","handlePressIn","useCallback","event","onPressIn","setPressed","handlePressOut","onPressOut","animatedElevation","useAnimatedElevation","pressed","transform","scale","pressEffectColor","testOnly_pressed"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Animated, GestureResponderEvent, StyleProp, StyleSheet, TextStyle, View, ViewStyle } from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface FABProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  icon?: React.ReactElement | ((props: { color: string; size: number }) => React.ReactElement | null) | null;\n\n  label?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  variant?: 'standard' | 'extended';\n\n  size?: 'default' | 'mini';\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  loading?: boolean;\n\n  loadingIndicator?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  loadingIndicatorPosition?: 'icon' | 'overlay';\n\n  visible?: boolean;\n\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  contentContainerStyle?: PressableProps['style'];\n\n  iconContainerStyle?: StyleProp<ViewStyle>;\n\n  labelContainerStyle?: StyleProp<ViewStyle>;\n\n  labelStyle?: StyleProp<TextStyle>;\n\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst FAB: React.FC<FABProps> = ({\n  icon,\n  label,\n  variant = 'standard',\n  size = 'default',\n  color = 'secondary',\n  tintColor,\n  loading = false,\n  loadingIndicator,\n  loadingIndicatorPosition = 'icon',\n  visible = true,\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  iconContainerStyle,\n  labelContainerStyle,\n  labelStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const hasIcon = useMemo(\n    () => icon || (loading && loadingIndicatorPosition === 'icon'),\n    [icon, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        backgroundColor: palette.main,\n        borderRadius: size === 'default' ? 28 : 20,\n      },\n      pressableContainer: {\n        borderRadius: size === 'default' ? 28 : 20,\n        overflow: 'hidden',\n      },\n      pressable: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingStart:\n          variant === 'extended'\n            ? hasIcon\n              ? size === 'default'\n                ? 12\n                : 6\n              : size === 'default'\n              ? 20\n              : 10\n            : size === 'default'\n            ? 16\n            : 8,\n        paddingEnd: variant === 'extended' ? (size === 'default' ? 20 : 10) : size === 'default' ? 16 : 8,\n        paddingVertical: size === 'default' ? 16 : 8,\n      },\n      iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 24,\n        height: 24,\n      },\n      labelContainer: {\n        marginStart: hasIcon ? (size === 'default' ? 12 : 6) : 0,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: palette.main,\n      },\n    }),\n    [variant, size, palette, hasIcon]\n  );\n\n  const animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false,\n    }).start();\n  }, [visible]);\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={palette.on} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: palette.on }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: palette.on });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getIcon = () => {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({ color: palette.on, size: 24 }) : icon;\n  };\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: palette.on }, labelStyle]}>\n            {label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n\n  return (\n    <Surface style={[animatedElevation, styles.container, { transform: [{ scale: animated }] }, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? palette.on}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasIcon && <View style={[styles.iconContainer, iconContainerStyle]}>{getIcon()}</View>}\n          {variant === 'extended' && <View style={[styles.labelContainer, labelContainerStyle]}>{getLabel()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n    </Surface>\n  );\n};\n\nexport default FAB;\n"]},"metadata":{},"sourceType":"module"}