{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Portal } from \"./base/PortalContext\";\nimport Surface from \"./Surface\";\n\nvar Dialog = function Dialog(_ref) {\n  var _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      onDismiss = _ref.onDismiss,\n      children = _ref.children;\n\n  var _useState = useState(visible),\n      _useState2 = _slicedToArray(_useState, 2),\n      portalVisible = _useState2[0],\n      setPortalVisible = _useState2[1];\n\n  var animatedValue = useMemo(function () {\n    return new Animated.Value(visible ? 1 : 0);\n  }, []);\n  useEffect(function () {\n    if (visible) setPortalVisible(true);\n    Animated.timing(animatedValue, {\n      toValue: visible ? 1 : 0,\n      duration: 225,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: Platform.OS !== 'android'\n    }).start(function () {\n      if (!visible) setPortalVisible(false);\n    });\n  }, [visible]);\n  if (!portalVisible) return null;\n  return React.createElement(Portal, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: onDismiss\n  }, React.createElement(Animated.View, {\n    style: [StyleSheet.absoluteFill, styles.backdrop, {\n      opacity: animatedValue\n    }]\n  })), React.createElement(Animated.View, {\n    style: [StyleSheet.absoluteFill, styles.container, {\n      opacity: animatedValue\n    }],\n    pointerEvents: \"box-none\",\n    needsOffscreenAlphaCompositing: Platform.OS === 'android'\n  }, React.createElement(Surface, {\n    category: \"medium\",\n    elevation: 24,\n    style: [styles.surface]\n  }, children)));\n};\n\nvar styles = StyleSheet.create({\n  backdrop: {\n    backgroundColor: 'rgba(0,0,0,.5)'\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  surface: {\n    width: 280,\n    marginHorizontal: 40\n  }\n});\nexport default Dialog;","map":{"version":3,"sources":["Dialog.tsx"],"names":["Dialog","visible","children","useState","animatedValue","useMemo","Animated","useEffect","setPortalVisible","toValue","duration","easing","Easing","useNativeDriver","Platform","onDismiss","StyleSheet","styles","opacity","backdrop","backgroundColor","container","justifyContent","alignItems","surface","width","marginHorizontal"],"mappings":";AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,OAAA,EAAA,QAAA,QAAA,OAAA;;;;;;AAEA,SAAA,MAAA;AACA,OAAA,OAAA;;AAQA,IAAMA,MAA6B,GAAG,SAAhCA,MAAgC,CAAA,IAAA,EAA8C;AAA7C,qBAA6C,IAA7C,CAAEC,OAAF;AAAA,MAAEA,OAAF,6BAAA,KAAA;AAAA,MAAA,SAAA,GAA6C,IAA7C,CAAA,SAAA;AAAA,MAA8BC,QAA9B,GAA6C,IAA7C,CAA8BA,QAA9B;;AACrC,kBAA0CC,QAAQ,CAAlD,OAAkD,CAAlD;AAAA;AAAA,MAAM,aAAN;AAAA,MAAM,gBAAN;;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAAC;AAAA,WAAM,IAAIC,QAAQ,CAAZ,KAAA,CAAmBL,OAAO,GAAA,CAAA,GAAjC,CAAO,CAAN;AAAA,GAAD,EAA7B,EAA6B,CAA7B;AAEAM,EAAAA,SAAS,CAAC,YAAM;AACd,QAAA,OAAA,EAAaC,gBAAgB,CAAhBA,IAAgB,CAAhBA;AAEbF,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,aAAAA,EAA+B;AAC7BG,MAAAA,OAAO,EAAER,OAAO,GAAA,CAAA,GADa,CAAA;AAE7BS,MAAAA,QAAQ,EAFqB,GAAA;AAG7BC,MAAAA,MAAM,EAAEC,MAAM,CAANA,GAAAA,CAAWA,MAAM,CAHI,KAGrBA,CAHqB;AAI7BC,MAAAA,eAAe,EAAEC,QAAQ,CAARA,EAAAA,KAAgB;AAJJ,KAA/BR,EAAAA,KAAAA,CAKS,YAAM;AACb,UAAI,CAAJ,OAAA,EAAcE,gBAAgB,CAAhBA,KAAgB,CAAhBA;AANhBF,KAAAA;AAHO,GAAA,EAWN,CAXHC,OAWG,CAXM,CAATA;AAaA,MAAI,CAAJ,aAAA,EAAoB,OAAA,IAAA;AAEpB,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,IAAA,OAAO,EAAEQ;AAAnC,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,IAAA,KAAK,EAAE,CAACC,UAAU,CAAX,YAAA,EAA0BC,MAAM,CAAhC,QAAA,EAA2C;AAAEC,MAAAA,OAAO,EAAEd;AAAX,KAA3C;AAAtB,GAAA,CADF,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACY,UAAU,CAAX,YAAA,EAA0BC,MAAM,CAAhC,SAAA,EAA4C;AAAEC,MAAAA,OAAO,EAAEd;AAAX,KAA5C,CADT;AAEE,IAAA,aAAa,EAFf,UAAA;AAGE,IAAA,8BAA8B,EAAEU,QAAQ,CAARA,EAAAA,KAAgB;AAHlD,GAAA,EAKE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,IAAA,QAAQ,EAAjB,QAAA;AAA2B,IAAA,SAAS,EAApC,EAAA;AAA0C,IAAA,KAAK,EAAE,CAACG,MAAM,CAAP,OAAA;AAAjD,GAAA,EAVN,QAUM,CALF,CAJF,CADF;AApBF,CAAA;;AAsCA,IAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE;AADT,GADqB;AAI/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH,GAJoB;AAQ/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EADE,GAAA;AAEPC,IAAAA,gBAAgB,EAAE;AAFX;AARsB,CAAlB,CAAf;AAcA,eAAA,MAAA","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Animated, Easing, Platform, StyleSheet, TouchableWithoutFeedback } from 'react-native';\nimport { Portal } from './base/PortalContext';\nimport Surface from './Surface';\n\nexport interface DialogProps {\n  visible?: boolean;\n\n  onDismiss?: () => void;\n}\n\nconst Dialog: React.FC<DialogProps> = ({ visible = false, onDismiss, children }) => {\n  const [portalVisible, setPortalVisible] = useState(visible);\n\n  const animatedValue = useMemo(() => new Animated.Value(visible ? 1 : 0), []);\n\n  useEffect(() => {\n    if (visible) setPortalVisible(true);\n\n    Animated.timing(animatedValue, {\n      toValue: visible ? 1 : 0,\n      duration: 225,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: Platform.OS !== 'android',\n    }).start(() => {\n      if (!visible) setPortalVisible(false);\n    });\n  }, [visible]);\n\n  if (!portalVisible) return null;\n\n  return (\n    <Portal>\n      <TouchableWithoutFeedback onPress={onDismiss}>\n        <Animated.View style={[StyleSheet.absoluteFill, styles.backdrop, { opacity: animatedValue }]} />\n      </TouchableWithoutFeedback>\n      <Animated.View\n        style={[StyleSheet.absoluteFill, styles.container, { opacity: animatedValue }]}\n        pointerEvents=\"box-none\"\n        needsOffscreenAlphaCompositing={Platform.OS === 'android'}\n      >\n        <Surface category=\"medium\" elevation={24} style={[styles.surface]}>\n          {children}\n        </Surface>\n      </Animated.View>\n    </Portal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    backgroundColor: 'rgba(0,0,0,.5)',\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  surface: {\n    width: 280,\n    marginHorizontal: 40,\n  },\n});\n\nexport default Dialog;\n"]},"metadata":{},"sourceType":"module"}