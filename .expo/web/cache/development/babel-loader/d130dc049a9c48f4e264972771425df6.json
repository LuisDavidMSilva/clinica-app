{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fill\", \"inline\", \"center\", \"direction\", \"justify\", \"items\", \"self\", \"content\", \"wrap\", \"basis\", \"grow\", \"shrink\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport Box from \"./Box\";\n\nvar Flex = function Flex(_ref) {\n  var fill = _ref.fill,\n      inline = _ref.inline,\n      center = _ref.center,\n      direction = _ref.direction,\n      justify = _ref.justify,\n      items = _ref.items,\n      self = _ref.self,\n      content = _ref.content,\n      wrap = _ref.wrap,\n      basis = _ref.basis,\n      grow = _ref.grow,\n      shrink = _ref.shrink,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var flex = useMemo(function () {\n    return typeof fill === 'boolean' ? fill ? 1 : undefined : fill;\n  }, [fill]);\n  var flexDirection = useMemo(function () {\n    return inline ? 'row' : direction;\n  }, [inline, direction]);\n  var justifyContent = useMemo(function () {\n    if (center) return 'center';\n\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      case 'between':\n        return 'space-between';\n\n      case 'around':\n        return 'space-around';\n\n      case 'evenly':\n        return 'space-evenly';\n\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n  var alignItems = useMemo(function () {\n    if (center) return 'center';\n\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      default:\n        return items;\n    }\n  }, [center, items]);\n  var alignSelf = useMemo(function () {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      default:\n        return self;\n    }\n  }, [self]);\n  var alignContent = useMemo(function () {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      case 'between':\n        return 'space-between';\n\n      case 'around':\n        return 'space-around';\n\n      default:\n        return content;\n    }\n  }, [content]);\n  var flexWrap = useMemo(function () {\n    return typeof wrap === 'boolean' ? wrap ? 'wrap' : undefined : wrap;\n  }, [wrap]);\n  var flexStyle = useMemo(function () {\n    return {\n      flex: flex,\n      flexDirection: flexDirection,\n      justifyContent: justifyContent,\n      alignItems: alignItems,\n      alignSelf: alignSelf,\n      alignContent: alignContent,\n      flexWrap: flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink\n    };\n  }, [flex, flexDirection, justifyContent, alignItems, alignSelf, alignContent, flexWrap, basis, grow, shrink]);\n  return React.createElement(Box, _extends({\n    style: [flexStyle, style]\n  }, rest));\n};\n\nexport default Flex;\nexport var Spacer = function Spacer(props) {\n  return React.createElement(Flex, _extends({\n    fill: true,\n    self: \"stretch\"\n  }, props));\n};","map":{"version":3,"sources":["Flex.tsx"],"names":["Flex","rest","flex","useMemo","fill","flexDirection","inline","justifyContent","alignItems","alignSelf","alignContent","flexWrap","wrap","flexStyle","flexBasis","flexGrow","flexShrink","shrink","Spacer","props"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport type { FlexStyle, ViewStyle } from 'react-native';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface FlexProps extends BoxProps {\n  /**\n   * Shorthand for the `flex` style property.\n   * If `true` is passed, the `flex` style property will be set to `1`.\n   */\n  fill?: boolean | number;\n\n  /**\n   * Shorthand for `{ flexDirection: \"row\" }`.\n   */\n  inline?: boolean;\n\n  /**\n   * Shorthand for `{ justifyContent: \"center\", alignItems: \"center\" }`.\n   */\n  center?: boolean;\n\n  /**\n   * Shorthand for the `flexDirection` style property.\n   */\n  direction?: FlexStyle['flexDirection'];\n\n  /**\n   * Shorthand for the `justifyContent` style property.\n   * If `center` prop is set to `true`, `justifyContent` will be forced to `center`.\n   */\n  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';\n\n  /**\n   * Shorthand for the `alignItems` style property.\n   * If `center` prop is set to `true`, `alignItems` will be forced to `center`.\n   */\n  items?: 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignSelf` style property.\n   */\n  self?: 'auto' | 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignContent` style property.\n   */\n  content?: 'start' | 'end' | 'center' | 'stretch' | 'between' | 'around';\n\n  /**\n   * Shorthand for the `flexWrap` style property.\n   * If `true` is passed, the `flexWrap` style property will be set to `wrap`.\n   */\n  wrap?: boolean | FlexStyle['flexWrap'];\n\n  /**\n   * Shorthand for the `flexBasis` style property.\n   */\n  basis?: FlexStyle['flexBasis'];\n\n  /**\n   * Shorthand for the `flexGrow` style property.\n   */\n  grow?: FlexStyle['flexGrow'];\n\n  /**\n   * Shorthand for the `flexShrink` style property.\n   */\n  shrink?: FlexStyle['flexShrink'];\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  fill,\n  inline,\n  center,\n  direction,\n  justify,\n  items,\n  self,\n  content,\n  wrap,\n  basis,\n  grow,\n  shrink,\n  style,\n  ...rest\n}) => {\n  const flex = useMemo(\n    () => (typeof fill === 'boolean' ? (fill ? 1 : undefined) : fill),\n    [fill]\n  );\n\n  const flexDirection = useMemo(\n    () => (inline ? 'row' : direction),\n    [inline, direction]\n  );\n\n  const justifyContent = useMemo(() => {\n    if (center) return 'center';\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      case 'evenly':\n        return 'space-evenly';\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n\n  const alignItems = useMemo(() => {\n    if (center) return 'center';\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return items;\n    }\n  }, [center, items]);\n\n  const alignSelf = useMemo(() => {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return self;\n    }\n  }, [self]);\n\n  const alignContent = useMemo(() => {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      default:\n        return content;\n    }\n  }, [content]);\n\n  const flexWrap = useMemo(\n    () => (typeof wrap === 'boolean' ? (wrap ? 'wrap' : undefined) : wrap),\n    [wrap]\n  );\n\n  const flexStyle = useMemo(\n    (): ViewStyle => ({\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink,\n    }),\n    [\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      basis,\n      grow,\n      shrink,\n    ]\n  );\n\n  return <Box style={[flexStyle, style]} {...rest} />;\n};\n\nexport default Flex;\n\nexport const Spacer: React.FC<FlexProps> = (props) => {\n  return <Flex fill self=\"stretch\" {...props} />;\n};\n"]},"metadata":{},"sourceType":"module"}