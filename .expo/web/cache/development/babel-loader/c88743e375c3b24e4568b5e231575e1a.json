{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext, useContext } from 'react';\nimport { usePaletteColor } from \"../hooks/use-palette-color\";\nexport var IconComponentContext = createContext(null);\nexport var useIconComponent = function useIconComponent() {\n  return useContext(IconComponentContext);\n};\nexport var IconComponentProvider = function IconComponentProvider(_ref) {\n  var IconComponent = _ref.IconComponent,\n      children = _ref.children;\n  return React.createElement(IconComponentContext.Provider, {\n    value: IconComponent !== null && IconComponent !== void 0 ? IconComponent : null\n  }, children);\n};\nexport var Icon = function Icon(_ref2) {\n  var _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'on-background' : _ref2$color,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n\n  var IconComponent = useIconComponent();\n\n  if (!IconComponent) {\n    throw new Error('`IconComponent` is undefined. Seems like you forgot to wrap your component with `Provider`.');\n  }\n\n  var _usePaletteColor = usePaletteColor(color),\n      main = _usePaletteColor.main;\n\n  return React.createElement(IconComponent, _extends({}, rest, {\n    color: main\n  }));\n};","map":{"version":3,"sources":["IconComponentContext.tsx"],"names":["IconComponentContext","createContext","useIconComponent","useContext","IconComponentProvider","children","IconComponent","Icon","color","rest","main","usePaletteColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,eAAA;AAQA,OAAO,IAAMA,oBAAoB,GAAGC,aAAa,CAA1C,IAA0C,CAA1C;AAEP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAMC,UAAU,CAAzC,oBAAyC,CAAhB;AAAA,CAAzB;AAEP,OAAO,IAAMC,qBAA2D,GAAG,SAA9DA,qBAA8D,CAAA,IAAA,EAAiC;AAAhC,MAAA,aAAA,GAAgC,IAAhC,CAAA,aAAA;AAAA,MAAiBC,QAAjB,GAAgC,IAAhC,CAAiBA,QAAjB;AAC1E,SAAO,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,EAAA;AAA+B,IAAA,KAAK,EAAEC,aAAF,KAAA,IAAEA,IAAAA,aAAF,KAAA,KAAA,CAAEA,GAAF,aAAEA,GAAiB;AAAvD,GAAA,EAAP,QAAO,CAAP;AADK,CAAA;AAcP,OAAO,IAAMC,IAAyB,GAAG,SAA5BA,IAA4B,CAAA,KAAA,EAA0C;AAAzC,oBAAyC,KAAzC,CAAEC,KAAF;AAAA,MAAEA,KAAF,4BAAA,eAAA;AAAA,MAA8BC,IAA9B,4BAAyC,KAAzC;;AACxC,MAAMH,aAAa,GAAGJ,gBAAtB,EAAA;;AACA,MAAI,CAAJ,aAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,6FAAM,CAAN;AACD;;AACD,yBAAiBS,eAAe,CAAhC,KAAgC,CAAhC;AAAA,MAAQD,IAAR,oBAAQA,IAAR;;AACA,SAAO,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAAyB,IAAA,KAAK,EAAEA;AAAhC,GAAA,CAAA,CAAP;AANK,CAAA","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { Color, usePaletteColor } from '../hooks/use-palette-color';\n\nexport type IconComponent = React.ComponentType<IconProps>;\n\nexport interface IconComponentProviderProps {\n  IconComponent?: IconComponent | null;\n}\n\nexport const IconComponentContext = createContext<IconComponent | null>(null);\n\nexport const useIconComponent = () => useContext(IconComponentContext);\n\nexport const IconComponentProvider: React.FC<IconComponentProviderProps> = ({ IconComponent, children }) => {\n  return <IconComponentContext.Provider value={IconComponent ?? null}>{children}</IconComponentContext.Provider>;\n};\n\nexport interface IconProps {\n  name: string;\n\n  size?: number;\n\n  color?: Color;\n\n  [key: string]: any;\n}\n\nexport const Icon: React.FC<IconProps> = ({ color = 'on-background', ...rest }) => {\n  const IconComponent = useIconComponent();\n  if (!IconComponent) {\n    throw new Error('`IconComponent` is undefined. Seems like you forgot to wrap your component with `Provider`.');\n  }\n  const { main } = usePaletteColor(color);\n  return <IconComponent {...rest} color={main} />;\n};\n"]},"metadata":{},"sourceType":"module"}