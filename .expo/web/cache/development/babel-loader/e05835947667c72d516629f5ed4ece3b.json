{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useState } from 'react';\nexport var useBoolean = function useBoolean() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var on = useCallback(function () {\n    setValue(true);\n  }, []);\n  var off = useCallback(function () {\n    setValue(false);\n  }, []);\n  var toggle = useCallback(function () {\n    setValue(function (prev) {\n      return !prev;\n    });\n  }, []);\n  return [value, {\n    on: on,\n    off: off,\n    toggle: toggle\n  }];\n};","map":{"version":3,"sources":["use-boolean.ts"],"names":["useBoolean","initialState","useState","on","useCallback","setValue","off","toggle","prev"],"mappings":";AAAA,SAAA,WAAA,EAAA,QAAA,QAAA,OAAA;AASA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAwC;AAAA,MAAvCC,YAAuC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,KAAU;;AAChE,kBAA0BC,QAAQ,CAAlC,YAAkC,CAAlC;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AAEA,MAAMC,EAAE,GAAGC,WAAW,CAAC,YAAM;AAC3BC,IAAAA,QAAQ,CAARA,IAAQ,CAARA;AADoB,GAAA,EAAtB,EAAsB,CAAtB;AAIA,MAAMC,GAAG,GAAGF,WAAW,CAAC,YAAM;AAC5BC,IAAAA,QAAQ,CAARA,KAAQ,CAARA;AADqB,GAAA,EAAvB,EAAuB,CAAvB;AAIA,MAAME,MAAM,GAAGH,WAAW,CAAC,YAAM;AAC/BC,IAAAA,QAAQ,CAAEG,UAAAA,IAAD;AAAA,aAAU,CAAnBH,IAAS;AAAA,KAAD,CAARA;AADwB,GAAA,EAA1B,EAA0B,CAA1B;AAIA,SAAO,CAAA,KAAA,EAAQ;AAAEF,IAAAA,EAAF,EAAEA,EAAF;AAAMG,IAAAA,GAAN,EAAMA,GAAN;AAAWC,IAAAA,MAAAA,EAAAA;AAAX,GAAR,CAAP;AAfK,CAAA","sourcesContent":["import { useCallback, useState } from 'react';\n\ntype InitialState = boolean | (() => boolean);\n\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n */\nexport const useBoolean = (initialState: InitialState = false) => {\n  const [value, setValue] = useState(initialState);\n\n  const on = useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const off = useCallback(() => {\n    setValue(false);\n  }, []);\n\n  const toggle = useCallback(() => {\n    setValue((prev) => !prev);\n  }, []);\n\n  return [value, { on, off, toggle }] as const;\n};\n"]},"metadata":{},"sourceType":"module"}