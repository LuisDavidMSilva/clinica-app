{"ast":null,"code":"import { useEffect, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme } from \"../base/ThemeContext\";\nvar inputRange = Array.from(Array(25).keys());\nexport var useAnimatedElevation = function useAnimatedElevation(elevation) {\n  var animated = useMemo(function () {\n    return new Animated.Value(elevation);\n  }, []);\n  useEffect(function () {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [elevation]);\n\n  var _useTheme = useTheme(),\n      elevations = _useTheme.elevations;\n\n  return useMemo(function () {\n    return [Platform.select({\n      android: {\n        elevation: animated\n      },\n      default: {\n        shadowColor: elevations[elevation].shadowColor,\n        shadowOffset: {\n          width: animated.interpolate({\n            inputRange: inputRange,\n            outputRange: Object.values(elevations).map(function (e) {\n              var _e$shadowOffset$width, _e$shadowOffset;\n\n              return (_e$shadowOffset$width = (_e$shadowOffset = e.shadowOffset) === null || _e$shadowOffset === void 0 ? void 0 : _e$shadowOffset.width) !== null && _e$shadowOffset$width !== void 0 ? _e$shadowOffset$width : 0;\n            })\n          }),\n          height: animated.interpolate({\n            inputRange: inputRange,\n            outputRange: Object.values(elevations).map(function (e) {\n              var _e$shadowOffset$heigh, _e$shadowOffset2;\n\n              return (_e$shadowOffset$heigh = (_e$shadowOffset2 = e.shadowOffset) === null || _e$shadowOffset2 === void 0 ? void 0 : _e$shadowOffset2.height) !== null && _e$shadowOffset$heigh !== void 0 ? _e$shadowOffset$heigh : 0;\n            })\n          })\n        },\n        shadowOpacity: animated.interpolate({\n          inputRange: inputRange,\n          outputRange: Object.values(elevations).map(function (e) {\n            var _e$shadowOpacity;\n\n            return (_e$shadowOpacity = e.shadowOpacity) !== null && _e$shadowOpacity !== void 0 ? _e$shadowOpacity : 0;\n          })\n        }),\n        shadowRadius: animated.interpolate({\n          inputRange: inputRange,\n          outputRange: Object.values(elevations).map(function (e) {\n            var _e$shadowRadius;\n\n            return (_e$shadowRadius = e.shadowRadius) !== null && _e$shadowRadius !== void 0 ? _e$shadowRadius : 0;\n          })\n        })\n      },\n      web: {\n        boxShadow: elevations[elevation].boxShadow,\n        transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'\n      }\n    }), Platform.select({\n      default: {},\n      web: {}\n    })];\n  }, [elevation, elevations]);\n};","map":{"version":3,"sources":["use-animated-elevation.ts"],"names":["inputRange","Array","useAnimatedElevation","elevation","animated","useMemo","Animated","useEffect","Platform","toValue","duration","useNativeDriver","elevations","useTheme","android","default","shadowColor","shadowOffset","width","outputRange","e","height","shadowOpacity","shadowRadius","web","boxShadow","transition"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { Animated, Platform, StyleProp, ViewStyle } from 'react-native';\nimport { Elevation, useTheme } from '../base/ThemeContext';\n\nconst inputRange = Array.from(Array(25).keys());\n\nexport const useAnimatedElevation = (elevation: Elevation): StyleProp<ViewStyle> => {\n  const animated = useMemo(() => new Animated.Value(elevation), []);\n\n  useEffect(() => {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [elevation]);\n\n  const { elevations } = useTheme();\n\n  return useMemo(\n    () => [\n      Platform.select({\n        android: { elevation: animated },\n        default: {\n          shadowColor: elevations[elevation].shadowColor,\n          shadowOffset: {\n            width: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.width ?? 0),\n            }),\n            height: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.height ?? 0),\n            }),\n          },\n          shadowOpacity: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowOpacity ?? 0),\n          }),\n          shadowRadius: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowRadius ?? 0),\n          }),\n        },\n        web: {\n          boxShadow: (elevations[elevation] as any).boxShadow,\n          transition:\n            'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n        },\n      }),\n      Platform.select({\n        default: {},\n        web: {},\n      }),\n    ],\n    [elevation, elevations]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}