{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"pressEffect\", \"pressEffectColor\", \"onLayout\", \"onPressIn\", \"onPressOut\", \"onFocus\", \"onBlur\", \"android_ripple\", \"onMouseEnter\", \"onMouseLeave\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNPressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport chroma from 'chroma-js';\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\n\nvar Pressable = function Pressable(_ref) {\n  var _ref$pressEffect = _ref.pressEffect,\n      pressEffect = _ref$pressEffect === void 0 ? Platform.select({\n    android: 'android-ripple',\n    web: 'ripple',\n    default: 'highlight'\n  }) : _ref$pressEffect,\n      _ref$pressEffectColor = _ref.pressEffectColor,\n      pressEffectColor = _ref$pressEffectColor === void 0 ? 'on-background' : _ref$pressEffectColor,\n      onLayout = _ref.onLayout,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      android_ripple = _ref.android_ripple,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePaletteColor = usePaletteColor(pressEffectColor),\n      color = _usePaletteColor.main;\n\n  var _useState = useState({\n    width: 0,\n    height: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      size = _useState2[0],\n      setSize = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      ripples = _useState4[0],\n      setRipples = _useState4[1];\n\n  var handleLayout = useCallback(function (event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    setSize({\n      width: width,\n      height: height\n    });\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(event);\n  }, [onLayout]);\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      pressed = _useState6[0],\n      setPressed = _useState6[1];\n\n  var handlePressIn = useCallback(function (event) {\n    setPressed(true);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n\n    if (pressEffect === 'ripple') {\n      var _event$nativeEvent = event.nativeEvent,\n          locationX = _event$nativeEvent.locationX,\n          locationY = _event$nativeEvent.locationY;\n      var x = (locationX !== null && locationX !== void 0 ? locationX : size.width / 2) - 0.5;\n      var y = (locationY !== null && locationY !== void 0 ? locationY : size.height / 2) - 0.5;\n      var scale = new Animated.Value(0);\n      var opacity = new Animated.Value(1);\n      var ripple = {\n        key: \"\" + (Date.now() + Math.random()),\n        style: {\n          start: x,\n          top: y,\n          transform: [{\n            scale: scale\n          }],\n          opacity: opacity\n        }\n      };\n      setRipples(function (prevState) {\n        return [].concat(_toConsumableArray(prevState), [ripple]);\n      });\n      Animated.timing(scale, {\n        toValue: Math.max(size.width * 1.25 + Math.abs(size.width / 2 - x) * 2, size.height * 1.25 + Math.abs(size.height / 2 - y) * 2),\n        easing: Easing.out(Easing.ease),\n        duration: 400,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [onPressIn, pressEffect, size]);\n  var handlePressOut = useCallback(function (event) {\n    setPressed(false);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n\n    if (pressEffect === 'ripple') {\n      Animated.timing(ripples[ripples.length - 1].style.opacity, {\n        toValue: 0,\n        easing: Easing.out(Easing.ease),\n        duration: 400,\n        useNativeDriver: false\n      }).start(function () {\n        setRipples(function (prevState) {\n          return prevState.slice(1);\n        });\n      });\n    }\n  }, [pressEffect, ripples, onPressOut]);\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      focused = _useState8[0],\n      setFocused = _useState8[1];\n\n  var handleFocus = useCallback(function (event) {\n    setFocused(true);\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n  }, [onFocus]);\n  var handleBlur = useCallback(function (event) {\n    setFocused(false);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [onBlur]);\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      hovered = _useState10[0],\n      setHovered = _useState10[1];\n\n  var handleMouseEnter = useCallback(function (event) {\n    setHovered(true);\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n  }, [onMouseEnter]);\n  var handleMouseLeave = useCallback(function (event) {\n    setHovered(false);\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n  }, [onMouseLeave]);\n  return React.createElement(RNPressable, _extends({\n    android_ripple: pressEffect === 'android-ripple' ? android_ripple !== null && android_ripple !== void 0 ? android_ripple : {\n      color: chroma(color).alpha(0.26).hex()\n    } : undefined,\n    onLayout: handleLayout,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  }, rest), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: hovered && !rest.disabled ? chroma(color).alpha(0.04).hex() : 'transparent'\n    }, {\n      transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'\n    }]\n  }), focused && !rest.disabled && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: chroma(color).alpha(0.12).hex()\n    }]\n  }), pressEffect === 'highlight' && pressed && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: chroma(color).alpha(0.26).hex()\n    }]\n  }), pressEffect === 'ripple' && ripples.length !== 0 && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.effectContainer]\n  }, ripples.map(function (ripple) {\n    return React.createElement(Animated.View, {\n      key: ripple.key,\n      style: [styles.ripple, {\n        backgroundColor: chroma(color).alpha(0.1).hex()\n      }, ripple.style]\n    });\n  })), children);\n};\n\nvar styles = StyleSheet.create({\n  effectContainer: {\n    overflow: 'hidden'\n  },\n  ripple: {\n    position: 'absolute',\n    width: 1,\n    height: 1,\n    borderRadius: 0.5\n  }\n});\nexport default Pressable;","map":{"version":3,"sources":["Pressable.tsx"],"names":["Pressable","pressEffect","android","web","default","pressEffectColor","rest","main","color","usePaletteColor","useState","width","height","handleLayout","useCallback","event","setSize","onLayout","handlePressIn","setPressed","onPressIn","locationY","x","locationX","size","y","scale","Animated","opacity","ripple","key","Date","Math","style","start","top","transform","setRipples","prevState","toValue","easing","Easing","duration","useNativeDriver","handlePressOut","onPressOut","ripples","handleFocus","setFocused","onFocus","handleBlur","onBlur","handleMouseEnter","setHovered","onMouseEnter","handleMouseLeave","onMouseLeave","android_ripple","chroma","StyleSheet","backgroundColor","hovered","transition","focused","styles","effectContainer","overflow","position","borderRadius"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n  Platform,\n  Pressable as RNPressable,\n  PressableProps as RNPressableProps,\n  StyleSheet,\n  TargetedEvent,\n  View,\n} from 'react-native';\nimport chroma from 'chroma-js';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface PressableProps extends RNPressableProps {\n  pressEffect?: 'none' | 'highlight' | 'ripple' | 'android-ripple';\n\n  pressEffectColor?: Color;\n\n  onMouseEnter?: (event: NativeSyntheticEvent<TargetedEvent>) => void;\n\n  onMouseLeave?: (event: NativeSyntheticEvent<TargetedEvent>) => void;\n\n  style?: any;\n}\n\nconst Pressable: React.FC<PressableProps> = ({\n  pressEffect = Platform.select({ android: 'android-ripple', web: 'ripple', default: 'highlight' }),\n  pressEffectColor = 'on-background',\n  onLayout,\n  onPressIn,\n  onPressOut,\n  onFocus,\n  onBlur,\n  android_ripple,\n  onMouseEnter,\n  onMouseLeave,\n  children,\n  ...rest\n}) => {\n  const { main: color } = usePaletteColor(pressEffectColor);\n\n  const [size, setSize] = useState({ width: 0, height: 0 });\n\n  const [ripples, setRipples] = useState<{ key: string; style: any }[]>([]);\n\n  const handleLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const { width, height } = event.nativeEvent.layout;\n      setSize({ width, height });\n      onLayout?.(event);\n    },\n    [onLayout]\n  );\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      setPressed(true);\n      onPressIn?.(event);\n\n      if (pressEffect === 'ripple') {\n        const { locationX, locationY } = event.nativeEvent;\n\n        const x = (locationX ?? size.width / 2) - 0.5;\n        const y = (locationY ?? size.height / 2) - 0.5;\n\n        const scale = new Animated.Value(0);\n        const opacity = new Animated.Value(1);\n\n        const ripple = {\n          key: `${Date.now() + Math.random()}`,\n          style: { start: x, top: y, transform: [{ scale }], opacity },\n        };\n\n        setRipples((prevState) => [...prevState, ripple]);\n\n        Animated.timing(scale, {\n          toValue: Math.max(\n            size.width * 1.25 + Math.abs(size.width / 2 - x) * 2,\n            size.height * 1.25 + Math.abs(size.height / 2 - y) * 2\n          ),\n          easing: Easing.out(Easing.ease),\n          duration: 400,\n          useNativeDriver: false,\n        }).start();\n      }\n    },\n    [onPressIn, pressEffect, size]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      setPressed(false);\n      onPressOut?.(event);\n\n      if (pressEffect === 'ripple') {\n        Animated.timing(ripples[ripples.length - 1].style.opacity, {\n          toValue: 0,\n          easing: Easing.out(Easing.ease),\n          duration: 400,\n          useNativeDriver: false,\n        }).start(() => {\n          setRipples((prevState) => prevState.slice(1));\n        });\n      }\n    },\n    [pressEffect, ripples, onPressOut]\n  );\n\n  const [focused, setFocused] = useState(false);\n\n  const handleFocus = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      setFocused(true);\n      onFocus?.(event);\n    },\n    [onFocus]\n  );\n\n  const handleBlur = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      setFocused(false);\n      onBlur?.(event);\n    },\n    [onBlur]\n  );\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleMouseEnter = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      setHovered(true);\n      onMouseEnter?.(event);\n    },\n    [onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      setHovered(false);\n      onMouseLeave?.(event);\n    },\n    [onMouseLeave]\n  );\n\n  return (\n    <RNPressable\n      android_ripple={\n        pressEffect === 'android-ripple' ? android_ripple ?? { color: chroma(color).alpha(0.26).hex() } : undefined\n      }\n      onLayout={handleLayout}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      {...({ onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave } as any)}\n      {...rest}\n    >\n      <View\n        style={[\n          StyleSheet.absoluteFill,\n          {\n            backgroundColor: hovered && !rest.disabled ? chroma(color).alpha(0.04).hex() : 'transparent',\n          },\n          { transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms' } as any,\n        ]}\n      />\n\n      {focused && !rest.disabled && (\n        <View style={[StyleSheet.absoluteFill, { backgroundColor: chroma(color).alpha(0.12).hex() }]} />\n      )}\n\n      {pressEffect === 'highlight' && pressed && (\n        <View style={[StyleSheet.absoluteFill, { backgroundColor: chroma(color).alpha(0.26).hex() }]} />\n      )}\n\n      {pressEffect === 'ripple' && ripples.length !== 0 && (\n        <View style={[StyleSheet.absoluteFill, styles.effectContainer]}>\n          {ripples.map((ripple) => (\n            <Animated.View\n              key={ripple.key}\n              style={[styles.ripple, { backgroundColor: chroma(color).alpha(0.1).hex() }, ripple.style]}\n            />\n          ))}\n        </View>\n      )}\n\n      {children}\n    </RNPressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  effectContainer: {\n    overflow: 'hidden',\n  },\n  ripple: {\n    position: 'absolute',\n    width: 1,\n    height: 1,\n    borderRadius: 0.5,\n  },\n});\n\nexport default Pressable;\n"]},"metadata":{},"sourceType":"module"}